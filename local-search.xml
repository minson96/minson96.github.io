<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>10_20_diary</title>
    <link href="/2023/10/20/10-20-diary/"/>
    <url>/2023/10/20/10-20-diary/</url>
    
    <content type="html"><![CDATA[<h1 id="10월-20일-금-클린코드-특강"><a href="#10월-20일-금-클린코드-특강" class="headerlink" title="10월 20일 (금) 클린코드 특강"></a>10월 20일 (금) 클린코드 특강</h1><p>이광운 멘토님</p><p>—실제 실무에서는 더 단순한 것이 지켜지지 않아서 고통받는다—</p><ul><li>Clean Code<ul><li>깨끗한 코드란? (회사, 생태계…)</li><li>프로그래머 일과 (새로운 코드를 짜기 보다 오래된 코드를 읽는 경우가 많다.)</li><li>어떤 프로젝트를 진행하면서 이전보다 이후가 더 깔끔해야 한다.(보이스카우트 원칙)</li><li>이미 지저분한 코드를 볼 경우에는 자신도 지저분한 코드를 짤 수 있다(깨진 유리창 원칙)</li><li>YAGNI(YOU AREN’t gonna need it)</li><li>컴퓨터가 이해할 수 있는 코드는 바보라도 짤 수 있다.<br>  유능한 프로그래머는 인간이 이해할 수 있는 코드를 짠다. - 마틴 파울러</li></ul></li><li>CleanCode chatGPT<ul><li>의미있는 이름<ul><li>맥락을 훑어보지 않더라도 이해할 수 있어야 한다.</li></ul></li><li><h2 id="테스트-테스트-작성으로-냄새-맡기-테스트-짜기-어렵다는-것은-유지-보수하기도-어렵다-핵심-로직-테스트가-더-중요하다-자동화된-테스트-테스트의-정도-→-두-발-뻗고-푹-잘-수-있는가-용기-안전망"><a href="#테스트-테스트-작성으로-냄새-맡기-테스트-짜기-어렵다는-것은-유지-보수하기도-어렵다-핵심-로직-테스트가-더-중요하다-자동화된-테스트-테스트의-정도-→-두-발-뻗고-푹-잘-수-있는가-용기-안전망" class="headerlink" title="테스트  - 테스트 작성으로 냄새 맡기  - 테스트 짜기 어렵다는 것은 유지 보수하기도 어렵다.  - 핵심 로직 테스트가 더 중요하다.  - 자동화된 테스트  - 테스트의 정도 → 두 발 뻗고 푹 잘 수 있는가?(용기, 안전망)"></a>테스트<br>  - 테스트 작성으로 냄새 맡기<br>  - 테스트 짜기 어렵다는 것은 유지 보수하기도 어렵다.<br>  - 핵심 로직 테스트가 더 중요하다.<br>  - 자동화된 테스트<br>  - 테스트의 정도 → 두 발 뻗고 푹 잘 수 있는가?(용기, 안전망)</h2></li><li>간결성<ul><li>keep it simple, stupid</li><li>단순하게 짜야 유지보수 유리</li><li>분기점 개수<ul><li>분기점 4개 이하가 적당한 것 같다</li></ul></li><li>복잡도<ul><li>진짜 필요한 기능만 간결하게 짤 것</li></ul></li></ul></li><li>일관성<ul><li>백 명이든 천 명이든 같잉 짠 것 처럼 작성해야 한다.</li><li>이름, 서식, 코드 관례 등</li><li>생산성, 유지 보수성, 테스트성, 안정성</li></ul></li><li>주석<ul><li>불필요한 주석</li><li>잘못된 주석 (보이는 즉시 삭제)</li><li>주석 코드 (보이는 즉시 삭제)</li></ul></li><li>단일 책임 원칙</li><li>중복 방지</li><li>함수<ul><li>작게 만들기</li><li>복잡도 낮추기 (분기점 4개)</li><li>파라미터 개수(4개)</li><li>죽은 함수 제거</li><li>하나의 일 잘하기</li></ul></li><li>작은 함수와 메서드<ul><li>작을 수록 좋다.</li><li>밀러의 매직넘버 7 → 프로그래머의 뇌</li><li>함수 15라인 → 유지보수 가능한 코딩의 기술, 자바편</li><li>도메인 단위로 작게 만든다.</li><li>놀라지 않게 하자. (함수명과 다른 행동을 하게 해서는 안된다.)</li></ul></li><li>매직 넘버, 문자열</li><li>버전 관리</li><li>코드 중복<ul><li>DRY(Don’t repeat yourself)</li><li>악취 퍼레이드의 하이라이트는 중복 코드다. - 켄트 백, 마틴 파울러</li><li>프로젝트 &#x3D; 생물</li></ul></li><li>오류 처리<ul><li>구체적</li><li>예외 정보</li></ul></li><li>의존성 주입</li><li>리팩토링<ul><li>지속적인 개선</li><li>더 읽기 쉽게, 더 유지하기 쉽게, 더 효율적이게</li></ul></li><li>클래스<ul><li>SRP(단일 책임)</li><li>ProductService<ul><li>ProductQueryService</li><li>ProductCommandService</li><li>등 작고, 단순하고, 응집할 수 있게 쪼개서 만들어야 한다.</li></ul></li></ul></li><li>도구<ul><li>sonarlint → 코드를 분석해서 어떠한 것을 고쳐야 하는지 알려줌</li><li>sonarqube → 프로젝트를 진행할 때 사용하는 도구 (대쉬보드 지원)</li><li>sonarcloud → 유료</li></ul></li></ul></li><li>정리<ul><li>내 코드가 아니다.</li><li>원칙들을 지키려고 노력하자</li><li>관례를 따르자.</li><li>나중은 오지 않는다.</li><li>자동화된 테스트로 안전망을 만들자.</li><li>도구의 도움을 받자.</li></ul></li><li>I’m not a great programmer. I’m just a good programmer with great habits - Kent Beck</li><li><h2 id="Q-A-지저분한-코드를-보고-어떻게-해야하는지-팁-지저분한-코드를-보고-리팩토링하려는-시도라도-하는-것이-좋을-것-같다-자신의-위치에서-최선을-다하는-것-saveProduct-productRepository-save-couponRepository-delete-이것을-각-각으로-분리해야-한다-읽기-팁-프로그램의-흐름을-다이어그램으로-그려-봐라-lucid-chart-같은-프로그램을-이용해서-그리면서-이해하면-좋다-개발자가-domain이-바뀌었을-때-어떻게-해야하는지-domain을-이해하려면-고객의-입장으로써-제품을-사용하고-이해해야-한다-코드를-보기-전에-제품을-이해해야-한다-고객-인터뷰를-보면서-제품을-이해해야-할-필요가-있다-내가-만든-서비스-제품-를-내가-사용해야-한다-개밥먹기-위의-내용들이-정석이-아닌-가이드라인이다-무조건적으로-따르는-것이-아닌-이러한-내용들을-작성하면서-유념해야-한다"><a href="#Q-A-지저분한-코드를-보고-어떻게-해야하는지-팁-지저분한-코드를-보고-리팩토링하려는-시도라도-하는-것이-좋을-것-같다-자신의-위치에서-최선을-다하는-것-saveProduct-productRepository-save-couponRepository-delete-이것을-각-각으로-분리해야-한다-읽기-팁-프로그램의-흐름을-다이어그램으로-그려-봐라-lucid-chart-같은-프로그램을-이용해서-그리면서-이해하면-좋다-개발자가-domain이-바뀌었을-때-어떻게-해야하는지-domain을-이해하려면-고객의-입장으로써-제품을-사용하고-이해해야-한다-코드를-보기-전에-제품을-이해해야-한다-고객-인터뷰를-보면서-제품을-이해해야-할-필요가-있다-내가-만든-서비스-제품-를-내가-사용해야-한다-개밥먹기-위의-내용들이-정석이-아닌-가이드라인이다-무조건적으로-따르는-것이-아닌-이러한-내용들을-작성하면서-유념해야-한다" class="headerlink" title="Q&amp;A  - 지저분한 코드를 보고 어떻게 해야하는지 팁      - 지저분한 코드를 보고 리팩토링하려는 시도라도 하는 것이 좋을 것 같다.      (자신의 위치에서 최선을 다하는 것)      - saveProduct &#x3D; productRepository.save() + couponRepository.delete()      이것을 각 각으로 분리해야 한다.  - 읽기 팁      - 프로그램의 흐름을 다이어그램으로 그려 봐라      - lucid chart 같은 프로그램을 이용해서 그리면서 이해하면 좋다.  - 개발자가 domain이 바뀌었을 때 어떻게 해야하는지      - domain을 이해하려면 고객의 입장으로써 제품을 사용하고 이해해야 한다.      - 코드를 보기 전에 제품을 이해해야 한다.      - 고객 인터뷰를 보면서 제품을 이해해야 할 필요가 있다.      - 내가 만든 서비스(제품)를 내가 사용해야 한다.(개밥먹기)  - 위의 내용들이 정석이 아닌 가이드라인이다. 무조건적으로 따르는 것이 아닌 이러한 내용들을 작성하면서 유념해야 한다."></a>Q&amp;A<br>  - 지저분한 코드를 보고 어떻게 해야하는지 팁<br>      - 지저분한 코드를 보고 리팩토링하려는 시도라도 하는 것이 좋을 것 같다.<br>      (자신의 위치에서 최선을 다하는 것)<br>      - saveProduct &#x3D; productRepository.save() + couponRepository.delete()<br>      이것을 각 각으로 분리해야 한다.<br>  - 읽기 팁<br>      - 프로그램의 흐름을 다이어그램으로 그려 봐라<br>      - lucid chart 같은 프로그램을 이용해서 그리면서 이해하면 좋다.<br>  - 개발자가 domain이 바뀌었을 때 어떻게 해야하는지<br>      - domain을 이해하려면 고객의 입장으로써 제품을 사용하고 이해해야 한다.<br>      - 코드를 보기 전에 제품을 이해해야 한다.<br>      - 고객 인터뷰를 보면서 제품을 이해해야 할 필요가 있다.<br>      - 내가 만든 서비스(제품)를 내가 사용해야 한다.(개밥먹기)<br>  - 위의 내용들이 정석이 아닌 가이드라인이다. 무조건적으로 따르는 것이 아닌 이러한 내용들을 작성하면서 유념해야 한다.</h2></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/20/hello-world/"/>
    <url>/2023/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
